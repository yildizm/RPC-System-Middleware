#!/usr/bin/env pyth
# -*- coding: utf-8 -*-

from __future__ import division
import numbers, json, jsonpickle, Pyro4, socket, select, exceptions, sys, threading

'''Automatically generated server skeleton script.
   Please do not edit this file by any means'''

MSGLEN = 4096
SERVERNAME = 'test_service'

'''This class is a dummy server for locating the server. An instance of this class is registered
to the name server so that client can access the ip:port of the real server skeleton'''
class proxy_server(object):
    def __init__(self, name, host, port):
        self.name = name
        self.host = host
        self.port = port

    def get_host(self):
        return self.host

    def get_port(self):
        return self.port

def run_pyro_daemon(daemon):
    daemon.requestLoop()

'''Server skeleton. It serves through IP and some available port of the machine it is started on.
The skeleton has an instance of the server class that serves the respective functions.'''
class test_skeleton:
    def __init__(self, server_instance, timeout=10000, retry_count=5):
        self.server_instance = server_instance
        self.request_set = set()
        self.timeout = timeout
        self.retry_count = retry_count

        self.serversocket = self.init(SERVERNAME)

    # 
    def init(self, servername):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            s.connect(("8.8.8.8", 80))
            host = s.getsockname()[0]
        except socket.error as err:
            print 'Socket Error: ', err
            sys.exit(0)
        finally:
            s.close()

        serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        serversocket.bind((host, 0))
        srv = proxy_server(servername, serversocket.getsockname()[0], serversocket.getsockname()[1])

        Pyro4.config.REQUIRE_EXPOSE = False
        daemon = Pyro4.Daemon()
        nameserver = Pyro4.locateNS()
        uri = daemon.register(srv)
        nameserver.register(srv.name, uri)

        threading.Thread(target=run_pyro_daemon, args=(daemon,)).start()
        print 'Pyro daemon started running...'

        return serversocket

    def receive_request(self, client, address):
        data = client.recv(MSGLEN)
        if data == '':
            raise IOError(2, 'Client socket disconnected')

        print data

        json_obj = json.loads(data)
        payload_size = str(json_obj['size'])
        func = json_obj['func']
        if str(len(json_obj['param'])) == payload_size:
            try:
                params = jsonpickle.decode(json_obj['param'])
            except:
                try: 
                    self.send_response(client, func, '', 'Unable to decode serialized parameters')
                except Exception as err:
                    client.shutdown(1)
                    client.close()
                    raise err
            
            if params[0] in self.request_set:
                try:
                    self.send_response(client, func, '', 'Recurrent Function Call')
                except Exception as err:
                    client.shutdown(1)
                    client.close()
                    raise err

            try:
                f = getattr(self.server_instance, func)
                input_param = params[1:]
                if not input_param:
                    retval = f()
                else:
                    retval = f(*input_param)
            except:
                try:
                    self.send_response(client, func, '', 'Invalid function name for server(' + SERVERNAME + ')')
                except Exception as err:
                    client.shutdown(1)
                    client.close()
                    raise err

            retval = list(retval)
            marshalled_param = jsonpickle.encode(retval)

            try:
                self.send_response(client, func, marshalled_param, 'SUCCESS')
            except Exception as err:
                client.shutdown(1)
                client.close()
                raise err

    def send_response(self, client, func_name, serialized_data, status):
        param_length = len(serialized_data)
        data = json.dumps({'size' : param_length, 'func' : func_name, 'param' : serialized_data, 'status' : status})
        msg_len = len(data)
        sent_amount = 0
        while sent_amount < msg_len:
            temp = client.send(data[sent_amount:])
            if temp == 0:
                raise IOError(0, 'Client socket disconnected')
            sent_amount += temp

        return 1

    def run(self):
        print 'Server started running...'
        print 'Listening on ' + self.serversocket.getsockname()[0] + ':' + str(self.serversocket.getsockname()[1])
        self.serversocket.listen(5)

        while 1:
            try:
                client, address = self.serversocket.accept()
                threading.Thread(target=self.receive_request, args=(client, address)).start()
            except KeyboardInterrupt as err:
                print 'Server terminated: ', err
                client.shutdown(1)
                client.close()
                break
            except Exception as err:
                print 'Problem while sending data back to client :', err

        print 'Server is shutting down...'